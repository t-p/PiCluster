---
# PersistentVolumeClaim for PostgreSQL database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-postgres-pvc
  namespace: immich
  labels:
    app: immich-postgres
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-nvme-node05
  resources:
    requests:
      storage: 100Gi
  selector:
    matchLabels:
      app: immich-postgres
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-postgres
  namespace: immich
  labels:
    app: immich-postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate # Required for persistent volumes
  selector:
    matchLabels:
      app: immich-postgres
  template:
    metadata:
      labels:
        app: immich-postgres
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5432"
        prometheus.io/path: "/metrics"
    spec:
      # Pin to node05 for NVMe performance
      nodeSelector:
        kubernetes.io/hostname: node05
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - node05
      # Init container to fix permissions
      initContainers:
        - name: fix-permissions
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              chown -R 999:999 /var/lib/postgresql/data
              chmod -R 755 /var/lib/postgresql/data
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          securityContext:
            runAsUser: 0
      containers:
        - name: postgres
          image: pgvector/pgvector:0.8.0-pg15
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: "immich"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: immich-postgres-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-postgres-secret
                  key: password
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_INITDB_ARGS
              value: "--data-checksums"
          # Resource limits optimized for Pi 5 performance
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          # Volume mounts for NVMe storage
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
              subPath: pgdata
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
              readOnly: true
          # Health checks for database connectivity
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          # Startup probe for initial database setup
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: immich-postgres-pvc
        - name: postgres-config
          configMap:
            name: immich-postgres-config
      # Security context for proper file permissions
      securityContext:
        fsGroup: 999 # postgres group
        runAsUser: 999 # postgres user
        runAsNonRoot: true
      # Restart policy for database reliability
      restartPolicy: Always
---
# PostgreSQL Service for internal cluster access
apiVersion: v1
kind: Service
metadata:
  name: immich-postgres
  namespace: immich
  labels:
    app: immich-postgres
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5432"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app: immich-postgres
---
# ConfigMap for PostgreSQL configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-postgres-config
  namespace: immich
  labels:
    app: immich-postgres
    component: database
data:
  postgresql.conf: |
    # PostgreSQL configuration optimized for Immich and Pi 5 hardware

    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 100

    # Memory settings optimized for 1GB limit
    shared_buffers = 256MB
    effective_cache_size = 768MB
    work_mem = 4MB
    maintenance_work_mem = 64MB

    # Checkpoint settings for NVMe performance
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100

    # Query planner settings
    random_page_cost = 1.1  # NVMe storage is fast
    effective_io_concurrency = 200

    # Write-ahead logging settings
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB

    # Logging settings
    log_destination = 'stderr'
    logging_collector = off
    log_min_messages = warning
    log_min_error_statement = error
    log_min_duration_statement = 1000  # Log slow queries (1 second)

    # Performance monitoring
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = none

    # Autovacuum settings for photo metadata
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50

    # Locale settings
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'

    # Default configuration for text search
    default_text_search_config = 'pg_catalog.english'

    # Timezone
    timezone = 'UTC'

    # Enable extensions commonly used by Immich
    shared_preload_libraries = 'pg_stat_statements'

# Note: PostgreSQL secret must be created manually before deployment
# See README.md for instructions on creating the immich-postgres-secret
